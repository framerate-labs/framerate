/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as PreferencesRouteImport } from './routes/preferences'
import { Route as LibraryRouteImport } from './routes/library'
import { Route as HomeRouteImport } from './routes/home'
import { Route as ExploreRouteImport } from './routes/explore'
import { Route as CollectionsRouteImport } from './routes/collections'
import { Route as IndexRouteImport } from './routes/index'
import { Route as authSignupRouteImport } from './routes/(auth)/signup'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as SeriesIdTitleRouteImport } from './routes/series/$id.$title'
import { Route as FilmsIdTitleRouteImport } from './routes/films/$id.$title'
import { Route as userUsernameCollectionsSlugIndexRouteImport } from './routes/(user)/$username/collections/$slug.index'
import { Route as userUsernameCollectionsSlugEditRouteImport } from './routes/(user)/$username/collections/$slug.edit'

const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const PreferencesRoute = PreferencesRouteImport.update({
  id: '/preferences',
  path: '/preferences',
  getParentRoute: () => rootRouteImport,
} as any)
const LibraryRoute = LibraryRouteImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const ExploreRoute = ExploreRouteImport.update({
  id: '/explore',
  path: '/explore',
  getParentRoute: () => rootRouteImport,
} as any)
const CollectionsRoute = CollectionsRouteImport.update({
  id: '/collections',
  path: '/collections',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignupRoute = authSignupRouteImport.update({
  id: '/(auth)/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const SeriesIdTitleRoute = SeriesIdTitleRouteImport.update({
  id: '/series/$id/$title',
  path: '/series/$id/$title',
  getParentRoute: () => rootRouteImport,
} as any)
const FilmsIdTitleRoute = FilmsIdTitleRouteImport.update({
  id: '/films/$id/$title',
  path: '/films/$id/$title',
  getParentRoute: () => rootRouteImport,
} as any)
const userUsernameCollectionsSlugIndexRoute =
  userUsernameCollectionsSlugIndexRouteImport.update({
    id: '/(user)/$username/collections/$slug/',
    path: '/$username/collections/$slug/',
    getParentRoute: () => rootRouteImport,
  } as any)
const userUsernameCollectionsSlugEditRoute =
  userUsernameCollectionsSlugEditRouteImport.update({
    id: '/(user)/$username/collections/$slug/edit',
    path: '/$username/collections/$slug/edit',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/collections': typeof CollectionsRoute
  '/explore': typeof ExploreRoute
  '/home': typeof HomeRoute
  '/library': typeof LibraryRoute
  '/preferences': typeof PreferencesRoute
  '/profile': typeof ProfileRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/films/$id/$title': typeof FilmsIdTitleRoute
  '/series/$id/$title': typeof SeriesIdTitleRoute
  '/$username/collections/$slug/edit': typeof userUsernameCollectionsSlugEditRoute
  '/$username/collections/$slug': typeof userUsernameCollectionsSlugIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/collections': typeof CollectionsRoute
  '/explore': typeof ExploreRoute
  '/home': typeof HomeRoute
  '/library': typeof LibraryRoute
  '/preferences': typeof PreferencesRoute
  '/profile': typeof ProfileRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/films/$id/$title': typeof FilmsIdTitleRoute
  '/series/$id/$title': typeof SeriesIdTitleRoute
  '/$username/collections/$slug/edit': typeof userUsernameCollectionsSlugEditRoute
  '/$username/collections/$slug': typeof userUsernameCollectionsSlugIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/collections': typeof CollectionsRoute
  '/explore': typeof ExploreRoute
  '/home': typeof HomeRoute
  '/library': typeof LibraryRoute
  '/preferences': typeof PreferencesRoute
  '/profile': typeof ProfileRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/films/$id/$title': typeof FilmsIdTitleRoute
  '/series/$id/$title': typeof SeriesIdTitleRoute
  '/(user)/$username/collections/$slug/edit': typeof userUsernameCollectionsSlugEditRoute
  '/(user)/$username/collections/$slug/': typeof userUsernameCollectionsSlugIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/collections'
    | '/explore'
    | '/home'
    | '/library'
    | '/preferences'
    | '/profile'
    | '/login'
    | '/signup'
    | '/films/$id/$title'
    | '/series/$id/$title'
    | '/$username/collections/$slug/edit'
    | '/$username/collections/$slug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/collections'
    | '/explore'
    | '/home'
    | '/library'
    | '/preferences'
    | '/profile'
    | '/login'
    | '/signup'
    | '/films/$id/$title'
    | '/series/$id/$title'
    | '/$username/collections/$slug/edit'
    | '/$username/collections/$slug'
  id:
    | '__root__'
    | '/'
    | '/collections'
    | '/explore'
    | '/home'
    | '/library'
    | '/preferences'
    | '/profile'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/films/$id/$title'
    | '/series/$id/$title'
    | '/(user)/$username/collections/$slug/edit'
    | '/(user)/$username/collections/$slug/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CollectionsRoute: typeof CollectionsRoute
  ExploreRoute: typeof ExploreRoute
  HomeRoute: typeof HomeRoute
  LibraryRoute: typeof LibraryRoute
  PreferencesRoute: typeof PreferencesRoute
  ProfileRoute: typeof ProfileRoute
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
  FilmsIdTitleRoute: typeof FilmsIdTitleRoute
  SeriesIdTitleRoute: typeof SeriesIdTitleRoute
  userUsernameCollectionsSlugEditRoute: typeof userUsernameCollectionsSlugEditRoute
  userUsernameCollectionsSlugIndexRoute: typeof userUsernameCollectionsSlugIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/preferences': {
      id: '/preferences'
      path: '/preferences'
      fullPath: '/preferences'
      preLoaderRoute: typeof PreferencesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/library': {
      id: '/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/explore': {
      id: '/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ExploreRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collections': {
      id: '/collections'
      path: '/collections'
      fullPath: '/collections'
      preLoaderRoute: typeof CollectionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/series/$id/$title': {
      id: '/series/$id/$title'
      path: '/series/$id/$title'
      fullPath: '/series/$id/$title'
      preLoaderRoute: typeof SeriesIdTitleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/films/$id/$title': {
      id: '/films/$id/$title'
      path: '/films/$id/$title'
      fullPath: '/films/$id/$title'
      preLoaderRoute: typeof FilmsIdTitleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(user)/$username/collections/$slug/': {
      id: '/(user)/$username/collections/$slug/'
      path: '/$username/collections/$slug'
      fullPath: '/$username/collections/$slug'
      preLoaderRoute: typeof userUsernameCollectionsSlugIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(user)/$username/collections/$slug/edit': {
      id: '/(user)/$username/collections/$slug/edit'
      path: '/$username/collections/$slug/edit'
      fullPath: '/$username/collections/$slug/edit'
      preLoaderRoute: typeof userUsernameCollectionsSlugEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CollectionsRoute: CollectionsRoute,
  ExploreRoute: ExploreRoute,
  HomeRoute: HomeRoute,
  LibraryRoute: LibraryRoute,
  PreferencesRoute: PreferencesRoute,
  ProfileRoute: ProfileRoute,
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
  FilmsIdTitleRoute: FilmsIdTitleRoute,
  SeriesIdTitleRoute: SeriesIdTitleRoute,
  userUsernameCollectionsSlugEditRoute: userUsernameCollectionsSlugEditRoute,
  userUsernameCollectionsSlugIndexRoute: userUsernameCollectionsSlugIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
