/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as HomeImport } from './routes/home'
import { Route as IndexImport } from './routes/index'
import { Route as authSignupImport } from './routes/(auth)/signup'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as SeriesIdTitleImport } from './routes/series/$id.$title'
import { Route as FilmsIdTitleImport } from './routes/films/$id.$title'

// Create/Update Routes

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authSignupRoute = authSignupImport.update({
  id: '/(auth)/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const SeriesIdTitleRoute = SeriesIdTitleImport.update({
  id: '/series/$id/$title',
  path: '/series/$id/$title',
  getParentRoute: () => rootRoute,
} as any)

const FilmsIdTitleRoute = FilmsIdTitleImport.update({
  id: '/films/$id/$title',
  path: '/films/$id/$title',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupImport
      parentRoute: typeof rootRoute
    }
    '/films/$id/$title': {
      id: '/films/$id/$title'
      path: '/films/$id/$title'
      fullPath: '/films/$id/$title'
      preLoaderRoute: typeof FilmsIdTitleImport
      parentRoute: typeof rootRoute
    }
    '/series/$id/$title': {
      id: '/series/$id/$title'
      path: '/series/$id/$title'
      fullPath: '/series/$id/$title'
      preLoaderRoute: typeof SeriesIdTitleImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/films/$id/$title': typeof FilmsIdTitleRoute
  '/series/$id/$title': typeof SeriesIdTitleRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/films/$id/$title': typeof FilmsIdTitleRoute
  '/series/$id/$title': typeof SeriesIdTitleRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/films/$id/$title': typeof FilmsIdTitleRoute
  '/series/$id/$title': typeof SeriesIdTitleRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/login'
    | '/signup'
    | '/films/$id/$title'
    | '/series/$id/$title'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/login'
    | '/signup'
    | '/films/$id/$title'
    | '/series/$id/$title'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/films/$id/$title'
    | '/series/$id/$title'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRoute
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
  FilmsIdTitleRoute: typeof FilmsIdTitleRoute
  SeriesIdTitleRoute: typeof SeriesIdTitleRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRoute,
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
  FilmsIdTitleRoute: FilmsIdTitleRoute,
  SeriesIdTitleRoute: SeriesIdTitleRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/home",
        "/(auth)/login",
        "/(auth)/signup",
        "/films/$id/$title",
        "/series/$id/$title"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/signup": {
      "filePath": "(auth)/signup.tsx"
    },
    "/films/$id/$title": {
      "filePath": "films/$id.$title.tsx"
    },
    "/series/$id/$title": {
      "filePath": "series/$id.$title.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
